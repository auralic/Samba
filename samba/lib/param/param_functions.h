/* This file was automatically generated by generate_param.py. DO NOT EDIT */

char *lpcfg_abort_shutdown_script(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_access_based_share_enum(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_acl_allow_execute_always(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_acl_check_permissions(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_acl_group_control(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_acl_map_full_control(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_add_group_script(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_add_machine_script(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_addport_command(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_addprinter_command(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_add_share_command(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_add_user_script(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_add_user_to_group_script(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_administrative_share(struct loadparm_service *, struct loadparm_service *);
const char **lpcfg_admin_users(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_afs_share(struct loadparm_service *, struct loadparm_service *);
int lpcfg_afs_token_lifetime(struct loadparm_context *);
const char *lpcfg_afs_username_map(struct loadparm_context *);
int lpcfg_aio_max_threads(struct loadparm_context *);
int lpcfg_aio_read_size(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_aio_write_behind(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_aio_write_size(struct loadparm_service *, struct loadparm_service *);
int lpcfg_algorithmic_rid_base(struct loadparm_context *);
int lpcfg_allocation_roundup_size(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_allow_dcerpc_auth_level_connect(struct loadparm_context *);
int lpcfg_allow_dns_updates(struct loadparm_context *);
bool lpcfg_allow_insecure_wide_links(struct loadparm_context *);
bool lpcfg_allow_nt4_crypto(struct loadparm_context *);
bool lpcfg_allow_trusted_domains(struct loadparm_context *);
bool lpcfg_allow_unsafe_cluster_upgrade(struct loadparm_context *);
bool lpcfg_async_smb_echo_handler(struct loadparm_context *);
bool lpcfg_auth_event_notification(struct loadparm_context *);
const char **lpcfg_auth_methods(struct loadparm_context *);
char *lpcfg_auto_services(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_bind_interfaces_only(struct loadparm_context *);
bool lpcfg_blocking_locks(struct loadparm_service *, struct loadparm_service *);
int lpcfg_block_size(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_browseable(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_browse_list(struct loadparm_context *);
const char *lpcfg_cache_directory(struct loadparm_context *);
int lpcfg_case_sensitive(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_change_notify(struct loadparm_context *);
char *lpcfg_change_share_command(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_check_password_script(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_cldap_port(struct loadparm_context *);
int lpcfg__client_ipc_max_protocol(struct loadparm_context *);
int lpcfg__client_ipc_min_protocol(struct loadparm_context *);
int lpcfg__client_ipc_signing(struct loadparm_context *);
bool lpcfg_client_lanman_auth(struct loadparm_context *);
int lpcfg_client_ldap_sasl_wrapping(struct loadparm_context *);
int lpcfg__client_max_protocol(struct loadparm_context *);
int lpcfg_client_min_protocol(struct loadparm_context *);
bool lpcfg_client_ntlmv2_auth(struct loadparm_context *);
bool lpcfg_client_plaintext_auth(struct loadparm_context *);
int lpcfg_client_schannel(struct loadparm_context *);
int lpcfg_client_signing(struct loadparm_context *);
bool lpcfg_client_use_spnego_principal(struct loadparm_context *);
bool lpcfg_client_use_spnego(struct loadparm_context *);
const char **lpcfg_cluster_addresses(struct loadparm_context *);
bool lpcfg_clustering(struct loadparm_context *);
char *lpcfg_comment(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_config_backend(struct loadparm_context *);
char *lpcfg_next_configfile(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_create_krb5_conf(struct loadparm_context *);
int lpcfg_create_mask(struct loadparm_service *, struct loadparm_service *);
int lpcfg_csc_policy(struct loadparm_service *, struct loadparm_service *);
const char *lpcfg__ctdbd_socket(struct loadparm_context *);
int lpcfg_ctdb_locktime_warn_threshold(struct loadparm_context *);
int lpcfg_ctdb_timeout(struct loadparm_context *);
int lpcfg_cups_connection_timeout(struct loadparm_context *);
int lpcfg_cups_encrypt(struct loadparm_context *);
char *lpcfg_cups_options(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_cups_server(struct loadparm_context *, TALLOC_CTX *ctx);
const char **lpcfg_dcerpc_endpoint_servers(struct loadparm_context *);
int lpcfg_deadtime(struct loadparm_context *);
bool lpcfg_debug_class(struct loadparm_context *);
bool lpcfg_debug_hires_timestamp(struct loadparm_context *);
bool lpcfg_debug_pid(struct loadparm_context *);
bool lpcfg_debug_prefix_timestamp(struct loadparm_context *);
bool lpcfg_debug_uid(struct loadparm_context *);
const char *lpcfg_dedicated_keytab_file(struct loadparm_context *);
int lpcfg_default_case(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_default_devmode(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_defaultservice(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_defer_sharing_violations(struct loadparm_context *);
char *lpcfg_delete_group_script(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_deleteprinter_command(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_delete_readonly(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_delete_share_command(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_delete_user_from_group_script(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_delete_user_script(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_delete_veto_files(struct loadparm_service *, struct loadparm_service *);
int lpcfg_dfree_cache_time(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_dfree_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_dgram_port(struct loadparm_context *);
int lpcfg_directory_mask(struct loadparm_service *, struct loadparm_service *);
int lpcfg_directory_name_cache_size(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_disable_netbios(struct loadparm_context *);
bool lpcfg__disable_spoolss(struct loadparm_context *);
bool lpcfg_dmapi_support(struct loadparm_service *, struct loadparm_service *);
const char **lpcfg_dns_forwarder(struct loadparm_context *);
bool lpcfg_wins_dns_proxy(struct loadparm_context *);
const char **lpcfg_dns_update_command(struct loadparm_context *);
bool lpcfg__domain_logons(struct loadparm_context *);
int lpcfg__domain_master(struct loadparm_context *);
char *lpcfg_dont_descend(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
const char *lpcfg_dos_charset(struct loadparm_context *);
bool lpcfg_dos_filemode(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_dos_filetime_resolution(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_dos_filetimes(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_durable_handles(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_ea_support(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_enable_asu_support(struct loadparm_context *);
bool lpcfg_enable_core_files(struct loadparm_context *);
bool lpcfg_enable_privileges(struct loadparm_context *);
bool lpcfg_encrypt_passwords(struct loadparm_context *);
bool lpcfg_enhanced_browsing(struct loadparm_context *);
char *lpcfg_enumports_command(struct loadparm_context *, TALLOC_CTX *ctx);
const char **lpcfg_eventlog_list(struct loadparm_context *);
bool lpcfg_fake_directory_create_times(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_fake_oplocks(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_follow_symlinks(struct loadparm_service *, struct loadparm_service *);
int lpcfg_force_create_mode(struct loadparm_service *, struct loadparm_service *);
int lpcfg_force_directory_mode(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_force_group(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_force_printername(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_force_unknown_acl_user(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_force_user(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
const char *lpcfg_fstype(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_get_quota_command(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_getwd_cache(struct loadparm_context *);
const char *lpcfg_guest_account(struct loadparm_context *);
bool lpcfg_guest_ok(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_guest_only(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_hide_dot_files(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_hide_files(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_hide_special_files(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_hide_unreadable(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_hide_unwriteable_files(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_homedir_map(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_host_msdfs(struct loadparm_context *);
bool lpcfg_hostname_lookups(struct loadparm_context *);
const char **lpcfg_hosts_allow(struct loadparm_service *, struct loadparm_service *);
const char **lpcfg_hosts_deny(struct loadparm_service *, struct loadparm_service *);
int lpcfg_idmap_cache_time(struct loadparm_context *);
int lpcfg_idmap_negative_cache_time(struct loadparm_context *);
bool lpcfg_include_system_krb5_conf(struct loadparm_context *);
bool lpcfg_inherit_acls(struct loadparm_service *, struct loadparm_service *);
int lpcfg_inherit_owner(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_inherit_permissions(struct loadparm_service *, struct loadparm_service *);
int lpcfg_init_logon_delay(struct loadparm_context *);
const char **lpcfg_init_logon_delayed_hosts(struct loadparm_context *);
const char **lpcfg_interfaces(struct loadparm_context *);
const char **lpcfg_invalid_users(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_iprint_server(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_keepalive(struct loadparm_context *);
int lpcfg_kerberos_encryption_types(struct loadparm_context *);
int lpcfg_kerberos_method(struct loadparm_context *);
bool lpcfg_kernel_change_notify(struct loadparm_context *);
bool lpcfg_kernel_oplocks(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_kernel_share_modes(struct loadparm_service *, struct loadparm_service *);
int lpcfg_kpasswd_port(struct loadparm_context *);
int lpcfg_krb5_port(struct loadparm_context *);
bool lpcfg__lanman_auth(struct loadparm_context *);
bool lpcfg_large_readwrite(struct loadparm_context *);
char *lpcfg_ldap_admin_dn(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_ldap_connection_timeout(struct loadparm_context *);
int lpcfg_ldap_debug_level(struct loadparm_context *);
int lpcfg_ldap_debug_threshold(struct loadparm_context *);
bool lpcfg_ldap_delete_dn(struct loadparm_context *);
int lpcfg_ldap_deref(struct loadparm_context *);
int lpcfg_ldap_follow_referral(struct loadparm_context *);
char *lpcfg__ldap_group_suffix(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg__ldap_idmap_suffix(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg__ldap_machine_suffix(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_ldap_page_size(struct loadparm_context *);
int lpcfg_ldap_passwd_sync(struct loadparm_context *);
int lpcfg_ldap_replication_sleep(struct loadparm_context *);
int lpcfg_ldap_server_require_strong_auth(struct loadparm_context *);
int lpcfg_ldap_ssl(struct loadparm_context *);
bool lpcfg_ldap_ssl_ads(struct loadparm_context *);
char *lpcfg_ldap_suffix(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_ldap_timeout(struct loadparm_context *);
char *lpcfg__ldap_user_suffix(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_level2_oplocks(struct loadparm_service *, struct loadparm_service *);
int lpcfg_lm_announce(struct loadparm_context *);
int lpcfg_lm_interval(struct loadparm_context *);
bool lpcfg_load_printers(struct loadparm_context *);
bool lpcfg_local_master(struct loadparm_context *);
const char *lpcfg_lock_directory(struct loadparm_context *);
bool lpcfg_locking(struct loadparm_service *, struct loadparm_service *);
int lpcfg_lock_spin_time(struct loadparm_context *);
char *lpcfg_logfile(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_logging(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_log_level(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_log_nt_token_command(struct loadparm_context *, TALLOC_CTX *ctx);
const char *lpcfg_logon_drive(struct loadparm_context *);
const char *lpcfg_logon_home(struct loadparm_context *);
const char *lpcfg_logon_path(struct loadparm_context *);
const char *lpcfg_logon_script(struct loadparm_context *);
bool lpcfg_log_writeable_files_on_exit(struct loadparm_context *);
char *lpcfg_lppause_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_lpq_cache_time(struct loadparm_context *);
char *lpcfg_lpq_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_lpresume_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_lprm_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_lsa_over_netlogon(struct loadparm_context *);
int lpcfg_machine_password_timeout(struct loadparm_context *);
char *lpcfg_magic_output(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_magic_script(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_mangled_names(struct loadparm_service *, struct loadparm_service *);
int lpcfg_mangle_prefix(struct loadparm_context *);
char lpcfg_mangling_char(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_mangling_method(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_map_acl_inherit(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_map_archive(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_map_hidden(struct loadparm_service *, struct loadparm_service *);
int lpcfg_map_readonly(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_map_system(struct loadparm_service *, struct loadparm_service *);
int lpcfg_map_to_guest(struct loadparm_context *);
int lpcfg_map_untrusted_to_domain(struct loadparm_context *);
int lpcfg_max_connections(struct loadparm_service *, struct loadparm_service *);
int lpcfg_max_disk_size(struct loadparm_context *);
int lpcfg_max_log_size(struct loadparm_context *);
int lpcfg_max_mux(struct loadparm_context *);
int lpcfg_max_open_files(struct loadparm_context *);
int lpcfg_max_print_jobs(struct loadparm_service *, struct loadparm_service *);
int lpcfg_max_reported_print_jobs(struct loadparm_service *, struct loadparm_service *);
int lpcfg_max_smbd_processes(struct loadparm_context *);
int lpcfg_max_stat_cache_size(struct loadparm_context *);
int lpcfg_max_ttl(struct loadparm_context *);
int lpcfg_max_wins_ttl(struct loadparm_context *);
int lpcfg_max_xmit(struct loadparm_context *);
char *lpcfg_message_command(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_min_print_space(struct loadparm_service *, struct loadparm_service *);
int lpcfg_min_receivefile_size(struct loadparm_context *);
int lpcfg_min_wins_ttl(struct loadparm_context *);
const char **lpcfg_mit_kdc_command(struct loadparm_context *);
char *lpcfg_msdfs_proxy(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_msdfs_root(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_msdfs_shuffle_referrals(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_multicast_dns_register(struct loadparm_context *);
int lpcfg_name_cache_timeout(struct loadparm_context *);
const char **lpcfg_name_resolve_order(struct loadparm_context *);
const char *lpcfg_nbt_client_socket_address(struct loadparm_context *);
int lpcfg_nbt_port(struct loadparm_context *);
const char *lpcfg_ncalrpc_dir(struct loadparm_context *);
const char **lpcfg_netbios_aliases(struct loadparm_context *);
const char *lpcfg_netbios_name(struct loadparm_context *);
const char *lpcfg_netbios_scope(struct loadparm_context *);
bool lpcfg_neutralize_nt4_emulation(struct loadparm_context *);
bool lpcfg_nis_homedir(struct loadparm_context *);
bool lpcfg_nmbd_bind_explicit_broadcast(struct loadparm_context *);
const char **lpcfg_nsupdate_command(struct loadparm_context *);
bool lpcfg_nt_acl_support(struct loadparm_service *, struct loadparm_service *);
int lpcfg_ntlm_auth(struct loadparm_context *);
bool lpcfg_nt_pipe_support(struct loadparm_context *);
const char *lpcfg_ntp_signd_socket_directory(struct loadparm_context *);
bool lpcfg_nt_status_support(struct loadparm_context *);
const char **lpcfg_ntvfs_handler(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_null_passwords(struct loadparm_context *);
bool lpcfg_obey_pam_restrictions(struct loadparm_context *);
int lpcfg_old_password_allowed_period(struct loadparm_context *);
int lpcfg_oplock_break_wait_time(struct loadparm_context *);
int lpcfg_oplock_contention_limit(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_oplocks(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_os2_driver_map(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_os_level(struct loadparm_context *);
bool lpcfg_pam_password_change(struct loadparm_context *);
char *lpcfg_panic_action(struct loadparm_context *, TALLOC_CTX *ctx);
const char *lpcfg_passdb_backend(struct loadparm_context *);
bool lpcfg_passdb_expand_explicit(struct loadparm_context *);
char *lpcfg_passwd_chat(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_passwd_chat_debug(struct loadparm_context *);
int lpcfg_passwd_chat_timeout(struct loadparm_context *);
char *lpcfg_passwd_program(struct loadparm_context *, TALLOC_CTX *ctx);
const char **lpcfg_password_hash_gpg_key_ids(struct loadparm_context *);
const char **lpcfg_password_hash_userpassword_schemes(struct loadparm_context *);
const char *lpcfg_password_server(struct loadparm_context *);
char *lpcfg_path(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_perfcount_module(struct loadparm_context *, TALLOC_CTX *ctx);
const char *lpcfg_pid_directory(struct loadparm_context *);
bool lpcfg_posix_locking(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_postexec(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_preexec(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_preexec_close(struct loadparm_service *, struct loadparm_service *);
int lpcfg__preferred_master(struct loadparm_context *);
const char **lpcfg_preload_modules(struct loadparm_context *);
bool lpcfg_preserve_case(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_printable(struct loadparm_service *, struct loadparm_service *);
int lpcfg_printcap_cache_time(struct loadparm_context *);
const char *lpcfg_printcap_name(struct loadparm_context *);
char *lpcfg_print_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg__printername(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_printing(struct loadparm_service *, struct loadparm_service *);
const char *lpcfg_printjob_username(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_print_notify_backchannel(struct loadparm_service *, struct loadparm_service *);
const char *lpcfg_private_dir(struct loadparm_context *);
bool lpcfg_profile_acls(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_queuepause_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_queueresume_command(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_raw_ntlmv2_auth(struct loadparm_context *);
const char **lpcfg_read_list(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_read_only(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_read_raw(struct loadparm_context *);
const char *lpcfg_realm(struct loadparm_context *);
bool lpcfg_registry_shares(struct loadparm_context *);
bool lpcfg_reject_md5_clients(struct loadparm_context *);
bool lpcfg_reject_md5_servers(struct loadparm_context *);
char *lpcfg_remote_announce(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_remote_browse_sync(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_rename_user_script(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_require_strong_key(struct loadparm_context *);
bool lpcfg_reset_on_zero_vc(struct loadparm_context *);
int lpcfg_restrict_anonymous(struct loadparm_context *);
const char **lpcfg_rndc_command(struct loadparm_context *);
char *lpcfg_root_directory(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_root_postexec(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_root_preexec(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
bool lpcfg_root_preexec_close(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_rpc_big_endian(struct loadparm_context *);
char *lpcfg_rpc_server_dynamic_port_range(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_rpc_server_port(struct loadparm_context *);
const char **lpcfg_samba_kcc_command(struct loadparm_context *);
int lpcfg__security(struct loadparm_context *);
int lpcfg_server_max_protocol(struct loadparm_context *);
int lpcfg_server_min_protocol(struct loadparm_context *);
bool lpcfg_server_multi_channel_support(struct loadparm_context *);
int lpcfg__server_role(struct loadparm_context *);
int lpcfg_server_schannel(struct loadparm_context *);
const char **lpcfg_server_services(struct loadparm_context *);
int lpcfg_server_signing(struct loadparm_context *);
char *lpcfg_server_string(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_set_primary_group_script(struct loadparm_context *, TALLOC_CTX *ctx);
char *lpcfg_set_quota_command(struct loadparm_context *, TALLOC_CTX *ctx);
const char *lpcfg_share_backend(struct loadparm_context *);
bool lpcfg_short_preserve_case(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_show_add_printer_wizard(struct loadparm_context *);
char *lpcfg_shutdown_script(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_smb2_leases(struct loadparm_context *);
int lpcfg_smb2_max_credits(struct loadparm_context *);
int lpcfg_smb2_max_read(struct loadparm_context *);
int lpcfg_smb2_max_trans(struct loadparm_context *);
int lpcfg_smb2_max_write(struct loadparm_context *);
int lpcfg_smbd_profiling_level(struct loadparm_context *);
int lpcfg_smb_encrypt(struct loadparm_service *, struct loadparm_service *);
const char *lpcfg_smb_passwd_file(struct loadparm_context *);
const char **lpcfg_smb_ports(struct loadparm_context *);
const char *lpcfg_socket_options(struct loadparm_context *);
const char **lpcfg_spn_update_command(struct loadparm_context *);
bool lpcfg_spotlight(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_stat_cache(struct loadparm_context *);
const char *lpcfg_state_directory(struct loadparm_context *);
bool lpcfg_store_dos_attributes(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_strict_allocate(struct loadparm_service *, struct loadparm_service *);
int lpcfg_strict_locking(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_strict_rename(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_strict_sync(struct loadparm_service *, struct loadparm_service *);
const char **lpcfg_svcctl_list(struct loadparm_context *);
bool lpcfg_sync_always(struct loadparm_service *, struct loadparm_service *);
int lpcfg_syslog(struct loadparm_context *);
bool lpcfg_syslog_only(struct loadparm_context *);
const char *lpcfg_template_homedir(struct loadparm_context *);
const char *lpcfg_template_shell(struct loadparm_context *);
bool lpcfg_time_server(struct loadparm_context *);
bool lpcfg_timestamp_logs(struct loadparm_context *);
const char *lpcfg__tls_cafile(struct loadparm_context *);
const char *lpcfg__tls_certfile(struct loadparm_context *);
const char *lpcfg__tls_crlfile(struct loadparm_context *);
const char *lpcfg__tls_dhpfile(struct loadparm_context *);
bool lpcfg_tls_enabled(struct loadparm_context *);
const char *lpcfg__tls_keyfile(struct loadparm_context *);
const char *lpcfg_tls_priority(struct loadparm_context *);
int lpcfg_tls_verify_peer(struct loadparm_context *);
bool lpcfg_unicode(struct loadparm_context *);
const char *lpcfg_unix_charset(struct loadparm_context *);
bool lpcfg_unix_extensions(struct loadparm_context *);
bool lpcfg_unix_password_sync(struct loadparm_context *);
bool lpcfg_use_client_driver(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_use_mmap(struct loadparm_context *);
int lpcfg_username_level(struct loadparm_context *);
char *lpcfg_username_map(struct loadparm_context *, TALLOC_CTX *ctx);
int lpcfg_username_map_cache_time(struct loadparm_context *);
char *lpcfg_username_map_script(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_usershare_allow_guests(struct loadparm_context *);
int lpcfg_usershare_max_shares(struct loadparm_context *);
bool lpcfg_usershare_owner_only(struct loadparm_context *);
char *lpcfg_usershare_path(struct loadparm_context *, TALLOC_CTX *ctx);
const char **lpcfg_usershare_prefix_allow_list(struct loadparm_context *);
const char **lpcfg_usershare_prefix_deny_list(struct loadparm_context *);
char *lpcfg_usershare_template_share(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg__use_sendfile(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_use_spnego(struct loadparm_context *);
bool lpcfg_utmp(struct loadparm_context *);
const char *lpcfg_utmp_directory(struct loadparm_context *);
const char **lpcfg_valid_users(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_veto_files(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
char *lpcfg_veto_oplock_files(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
const char **lpcfg_vfs_objects(struct loadparm_service *, struct loadparm_service *);
char *lpcfg_volume(struct loadparm_service *, struct loadparm_service *, TALLOC_CTX *ctx);
int lpcfg_web_port(struct loadparm_context *);
bool lpcfg_wide_links(struct loadparm_service *, struct loadparm_service *);
int lpcfg_winbind_cache_time(struct loadparm_context *);
const char *lpcfg_winbindd_socket_directory(struct loadparm_context *);
bool lpcfg_winbind_enum_groups(struct loadparm_context *);
bool lpcfg_winbind_enum_users(struct loadparm_context *);
int lpcfg_winbind_expand_groups(struct loadparm_context *);
int lpcfg_winbind_max_clients(struct loadparm_context *);
int lpcfg__winbind_max_domain_connections(struct loadparm_context *);
bool lpcfg_winbind_nested_groups(struct loadparm_context *);
bool lpcfg_winbind_normalize_names(struct loadparm_context *);
const char **lpcfg_winbind_nss_info(struct loadparm_context *);
bool lpcfg_winbind_offline_logon(struct loadparm_context *);
int lpcfg_winbind_reconnect_delay(struct loadparm_context *);
bool lpcfg_winbind_refresh_tickets(struct loadparm_context *);
int lpcfg_winbind_request_timeout(struct loadparm_context *);
bool lpcfg_winbind_rpc_only(struct loadparm_context *);
bool lpcfg_winbind_sealed_pipes(struct loadparm_context *);
const char *lpcfg_winbind_separator(struct loadparm_context *);
bool lpcfg_winbind_trusted_domains_only(struct loadparm_context *);
bool lpcfg_winbind_use_default_domain(struct loadparm_context *);
char *lpcfg_wins_hook(struct loadparm_context *, TALLOC_CTX *ctx);
bool lpcfg_wins_proxy(struct loadparm_context *);
const char **lpcfg_wins_server_list(struct loadparm_context *);
bool lpcfg_we_are_a_wins_server(struct loadparm_context *);
const char *lpcfg_workgroup(struct loadparm_context *);
int lpcfg_write_cache_size(struct loadparm_service *, struct loadparm_service *);
const char **lpcfg_write_list(struct loadparm_service *, struct loadparm_service *);
bool lpcfg_write_raw(struct loadparm_context *);
const char *lpcfg_wtmp_directory(struct loadparm_context *);
